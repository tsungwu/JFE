install.packages("xts")
?assetsLPM
??assetsLPM
install.packages("fPortfolio","fBasics","PerformanceAnalytics","quantmod")
install.packages("PerformanceAnalytics","quantmod")
?remove
?DF
?get
x=rnorm(100)
get(x,envir = .GlobalEnv)
get("y",x,envir = .GlobalEnv)
get(x,"y",envir = .GlobalEnv)
get("x",envir = .GlobalEnv)
?xts::index
??index
#7.
#RiskMenu <- tkmenu(menuBar)
#tkadd(menuBar,"cascade",label="Risk", menu=RiskMenu)
#library(JFE, quietly=TRUE)
}
as.character(.Tcl("ttk::style lookup TLabelframe.Label -foreground"))
ttk::style lookup TLabelframe.Label -foreground
?assign
?assign
install.packages("C:/Users/tsungwu/Dropbox/01myR/00myPackagesBuilt/03JFE/JFE_1.0.zip", repos = NULL, type = "win.binary")
library(JFE)
JFE()
install.packages("C:/Users/tsungwu/Dropbox/01myR/00myPackagesBuilt/03JFE/JFE_1.0.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/tsungwu/Dropbox/01myR/00myPackagesBuilt/03JFE/Test/JFE_1.0.zip", repos = NULL, type = "win.binary")
library(JFE)
JFE()
JFE()
library(JFE)
JFE()
detach("package:JFE", unload=TRUE)
library(JFE)
JFE
JFE()
install.packages("C:/Users/tsungwu/Dropbox/01myR/00myPackagesBuilt/03JFE/Test/JFE_1.0.zip", repos = NULL, type = "win.binary")
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
JFE()
library(JFE)
JFE()
library(quantmod)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
JFE()
library(fPortfolio)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
plot.new
library(JFE)
JFE()
library(JFE)
JFE()
.packages()
(,packages())
(.packages())
?legend
library(JFE)
JFE()
list()
list
list.files()
list()
ls
ls()
?new.env
Y=data("iris")
Y
data(iris)
irir
iris
data(iris)
irir
iris
assign("DF", data("iris"), envir = .GlobalEnv)
DF
assign("DF", eval(parse(text="data(iris)")), envir = .GlobalEnv)
library(JFE)
JFE()
data(IBM)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
.covLedoit <- function(x, spec = NULL) {
x.mat = as.matrix(x)
list(mu = colMeans(x.mat), Sigma = .SKCov(x.mat)$sigma)
}
###==Ledoit and Wolff(2003) Procedure====###
.SKCov <- function(dat) {
t=nrow(dat)
n=ncol(dat)
x=(diag(t)-matrix(1,t,t)/t)%*%dat
xmkt=apply(x,1,mean)
sMat=data.frame(x, xmkt)
sample=cov(sMat)*(t-1)/t
covmkt=sample[1:n,n+1]
varmkt=sample[n+1,n+1]
sample=sample[,-(n+1)]
sample=sample[-(n+1),]
prior=covmkt%*%t(covmkt)/varmkt
diag(prior)=diag(sample)
c=base::norm(sample-prior,"f")^2
y=x^2
p=1/t*sum(sum(t(y)%*%y))-sum(sum(sample^2))
# r is divided into diagonal
# and off-diagonal terms, and the off-diagonal term
# is itself divided into smaller terms
rdiag=1/t*sum(sum(y^2))-sum(diag(sample)^2)
z=x*replicate(n,as.numeric(xmkt))
v1=1/t*(t(y)%*%z)-replicate(n,covmkt)*sample
roff1=sum(sum(v1*t(replicate(n,covmkt))))/varmkt-sum(diag(v1)*covmkt)/varmkt
v3=1/t*t(z)%*%z-varmkt*sample
roff3=sum(sum(v3*(covmkt%*%t(covmkt))))/varmkt^2-sum(diag(v3)*covmkt^2)/varmkt^2
roff=2*roff1-roff3
r=rdiag+roff
# compute shrinkage constant
k=(p-r)/c
skg=max(0,min(1,k/t))
# compute the estimator
sig=skg*prior+(1-skg)*sample
w=list(sigma=sig,shrinkage=skg,prior=prior)
return(w)
}
###==========###
.LPM <- function(x, spec = NULL){
list(mu = fAssets::assetsLPM(x)$mu, Sigma = fAssets::assetsLPM(x)$Sigma)
}
###===Multivariate Student t=======###
.covStudent <- function (x, spec = NULL) {
x.mat =as.matrix(x)
list(mu = colMeans(x.mat), Sigma = MASS::cov.trob(x.mat)$cov)
}
###==========###
.GoldSach <- function(x, spec = NULL){
x.mat = x
rho=0.95
t=nrow(x.mat)
p=(t-1):0
w=rho^p
dat=sqrt(w)*x.mat
Sig=cov(dat)*t/sum(w)
list(mu =colMeans(x.mat) , Sigma =Sig)
}
###===Constant Correlation===###
.ShrinkCC <- function(x,spec = NULL) {
x.mat =x
t=nrow(x.mat)
p=(t-1):0
rho=0.95
w=rho^p
list(mu = colMeans(x.mat), Sigma = BurStFin::var.shrink.eqcor(x.mat,weights=1))
}
.GMVPStrategy <- function(data, spec = portfolioSpec(), constraints = "LongOnly", backtest = portfolioBacktest()) {
strategyPortfolio <- try(minriskPortfolio(data, spec, constraints))
if (class(strategyPortfolio) == "try-error") {
strategyPortfolio <- minvariancePortfolio(data,spec,constraints)
}
strategyPortfolio
}
library(JFE)
JFE()
library(JFE)
JFE()
.covLedoit <- function (x, spec = NULL) {
###==Ledoit and Wolff(2003)====###
x.mat = as.matrix(x)
list(mu = colMeans(x.mat), Sigma = .SKCov(x.mat)$sigma)
}
.SKCov <- function(dat) {
###==Ledoit and Wolff(2003) Procedure====###
t=nrow(dat)
n=ncol(dat)
x=(diag(t)-matrix(1,t,t)/t)%*%dat
xmkt=apply(x,1,mean)
sMat=data.frame(x, xmkt)
sample=cov(sMat)*(t-1)/t
covmkt=sample[1:n,n+1]
varmkt=sample[n+1,n+1]
sample=sample[,-(n+1)]
sample=sample[-(n+1),]
prior=covmkt%*%t(covmkt)/varmkt
diag(prior)=diag(sample)
c=base::norm(sample-prior,"f")^2
y=x^2
p=1/t*sum(sum(t(y)%*%y))-sum(sum(sample^2))
# r is divided into diagonal
# and off-diagonal terms, and the off-diagonal term
# is itself divided into smaller terms
rdiag=1/t*sum(sum(y^2))-sum(diag(sample)^2)
z=x*replicate(n,as.numeric(xmkt))
v1=1/t*(t(y)%*%z)-replicate(n,covmkt)*sample
roff1=sum(sum(v1*t(replicate(n,covmkt))))/varmkt-sum(diag(v1)*covmkt)/varmkt
v3=1/t*t(z)%*%z-varmkt*sample
roff3=sum(sum(v3*(covmkt%*%t(covmkt))))/varmkt^2-sum(diag(v3)*covmkt^2)/varmkt^2
roff=2*roff1-roff3
r=rdiag+roff
# compute shrinkage constant
k=(p-r)/c
skg=max(0,min(1,k/t))
# compute the estimator
sig=skg*prior+(1-skg)*sample
w=list(sigma=sig,shrinkage=skg,prior=prior)
return(w)
}
.covStudent <- function (x, spec = NULL) {
###===Multivariate Student t=======###
x.mat =as.matrix(x)
list(mu = colMeans(x.mat), Sigma = MASS::cov.trob(x.mat)$cov)
}
.GMVPStrategy <-function (data, spec = portfolioSpec(), constraints = "LongOnly", backtest = portfolioBacktest()) {
strategyPortfolio <- try(minriskPortfolio(data, spec, constraints))
if (class(strategyPortfolio) == "try-error") {
strategyPortfolio <- minvariancePortfolio(data,spec,constraints)
}
strategyPortfolio
}
.covLedoit <- function (x) {
###==Ledoit and Wolff(2003)====###
x.mat = as.matrix(x)
list(mu = colMeans(x.mat), Sigma = .SKCov(x.mat)$sigma)
}
library(JFE)
JFE
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
JFE()
library(JFE)
JFE()
(.MyCOVLedoit <- function (x, spec = NULL) {
x.mat = as.matrix(x)
list(mu = colMeans(x.mat), Sigma = .SKCov(x.mat)$sigma)
})
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
tangencyStrategy()
tangencyStrategy
library(JFE)
JFE()
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
JFE()
library(JFE)
devtools::install_github("tsungwu/JFE")
library(JFE)
JFE()
